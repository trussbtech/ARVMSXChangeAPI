'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Data
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
'
Namespace com.villagemanagementsoftware.VMSDataXChange
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="VMSDataXChangeSoap", [Namespace]:="http://VillageManagementSoftware.com/")>  _
    Partial Public Class VMSDataXChange
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private RequestServerUTCOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RequestServiceVersionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ARPostTransactionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private APAddVoucherUsingXMLOperationCompleted As System.Threading.SendOrPostCallback
        
        Private APAddVoucherFileOperationCompleted As System.Threading.SendOrPostCallback
        
        Private APApproveVoucherOperationCompleted As System.Threading.SendOrPostCallback
        
        Private APGetVouchersOperationCompleted As System.Threading.SendOrPostCallback
        
        Private APMergeVouchersOperationCompleted As System.Threading.SendOrPostCallback
        
        Private APPostPaymentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private APProcessVoucherOperationCompleted As System.Threading.SendOrPostCallback
        
        Private APUnProcessVoucherOperationCompleted As System.Threading.SendOrPostCallback
        
        Private APVoidPaymentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CommerceOrderOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DownloadComplianceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DownloadComplianceDSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PostComplianceFineOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateComplianceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateComplianceSequenceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteInsurerContactOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DownloadInsurerOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DownloadInsurerDSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateInsurerOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateInsurerContactOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetBankAccountBalanceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPropertyDocumentURLOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DocumentDownloadOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DocumentsDownloadOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DownloadPropertyDocumentsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DownloadPropertyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DownloadPropertiesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DownloadPropertyBlockListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DownloadPropertyDSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateeDistributionNoteOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DownloadResidentNoteOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DownloadResidentNoteDSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateResidentNoteOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteResidentNoteOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DownloadResidentContactOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DownloadResidentContactDSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateResidentContactOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteResidentContactOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteResidentContactMethodOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteVendorInsurancePolicyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteVendorInsurancePolicyDetailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DownloadVendorOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DownloadVendorDSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DownloadVendorByTaxIdentificationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateVendorOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateVendorContactOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateVendorInsuranceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateVendorLocationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = "http://vmsxchange.tssvendor.com/VMSDataXChange.asmx"
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event RequestServerUTCCompleted As RequestServerUTCCompletedEventHandler
        
        '''<remarks/>
        Public Event RequestServiceVersionCompleted As RequestServiceVersionCompletedEventHandler
        
        '''<remarks/>
        Public Event ARPostTransactionCompleted As ARPostTransactionCompletedEventHandler
        
        '''<remarks/>
        Public Event APAddVoucherUsingXMLCompleted As APAddVoucherUsingXMLCompletedEventHandler
        
        '''<remarks/>
        Public Event APAddVoucherFileCompleted As APAddVoucherFileCompletedEventHandler
        
        '''<remarks/>
        Public Event APApproveVoucherCompleted As APApproveVoucherCompletedEventHandler
        
        '''<remarks/>
        Public Event APGetVouchersCompleted As APGetVouchersCompletedEventHandler
        
        '''<remarks/>
        Public Event APMergeVouchersCompleted As APMergeVouchersCompletedEventHandler
        
        '''<remarks/>
        Public Event APPostPaymentCompleted As APPostPaymentCompletedEventHandler
        
        '''<remarks/>
        Public Event APProcessVoucherCompleted As APProcessVoucherCompletedEventHandler
        
        '''<remarks/>
        Public Event APUnProcessVoucherCompleted As APUnProcessVoucherCompletedEventHandler
        
        '''<remarks/>
        Public Event APVoidPaymentCompleted As APVoidPaymentCompletedEventHandler
        
        '''<remarks/>
        Public Event CommerceOrderCompleted As CommerceOrderCompletedEventHandler
        
        '''<remarks/>
        Public Event DownloadComplianceCompleted As DownloadComplianceCompletedEventHandler
        
        '''<remarks/>
        Public Event DownloadComplianceDSCompleted As DownloadComplianceDSCompletedEventHandler
        
        '''<remarks/>
        Public Event PostComplianceFineCompleted As PostComplianceFineCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateComplianceCompleted As UpdateComplianceCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateComplianceSequenceCompleted As UpdateComplianceSequenceCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteInsurerContactCompleted As DeleteInsurerContactCompletedEventHandler
        
        '''<remarks/>
        Public Event DownloadInsurerCompleted As DownloadInsurerCompletedEventHandler
        
        '''<remarks/>
        Public Event DownloadInsurerDSCompleted As DownloadInsurerDSCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateInsurerCompleted As UpdateInsurerCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateInsurerContactCompleted As UpdateInsurerContactCompletedEventHandler
        
        '''<remarks/>
        Public Event GetBankAccountBalanceCompleted As GetBankAccountBalanceCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPropertyDocumentURLCompleted As GetPropertyDocumentURLCompletedEventHandler
        
        '''<remarks/>
        Public Event DocumentDownloadCompleted As DocumentDownloadCompletedEventHandler
        
        '''<remarks/>
        Public Event DocumentsDownloadCompleted As DocumentsDownloadCompletedEventHandler
        
        '''<remarks/>
        Public Event DownloadPropertyDocumentsCompleted As DownloadPropertyDocumentsCompletedEventHandler
        
        '''<remarks/>
        Public Event DownloadPropertyCompleted As DownloadPropertyCompletedEventHandler
        
        '''<remarks/>
        Public Event DownloadPropertiesCompleted As DownloadPropertiesCompletedEventHandler
        
        '''<remarks/>
        Public Event DownloadPropertyBlockListCompleted As DownloadPropertyBlockListCompletedEventHandler
        
        '''<remarks/>
        Public Event DownloadPropertyDSCompleted As DownloadPropertyDSCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateeDistributionNoteCompleted As UpdateeDistributionNoteCompletedEventHandler
        
        '''<remarks/>
        Public Event DownloadResidentNoteCompleted As DownloadResidentNoteCompletedEventHandler
        
        '''<remarks/>
        Public Event DownloadResidentNoteDSCompleted As DownloadResidentNoteDSCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateResidentNoteCompleted As UpdateResidentNoteCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteResidentNoteCompleted As DeleteResidentNoteCompletedEventHandler
        
        '''<remarks/>
        Public Event DownloadResidentContactCompleted As DownloadResidentContactCompletedEventHandler
        
        '''<remarks/>
        Public Event DownloadResidentContactDSCompleted As DownloadResidentContactDSCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateResidentContactCompleted As UpdateResidentContactCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteResidentContactCompleted As DeleteResidentContactCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteResidentContactMethodCompleted As DeleteResidentContactMethodCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteVendorInsurancePolicyCompleted As DeleteVendorInsurancePolicyCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteVendorInsurancePolicyDetailCompleted As DeleteVendorInsurancePolicyDetailCompletedEventHandler
        
        '''<remarks/>
        Public Event DownloadVendorCompleted As DownloadVendorCompletedEventHandler
        
        '''<remarks/>
        Public Event DownloadVendorDSCompleted As DownloadVendorDSCompletedEventHandler
        
        '''<remarks/>
        Public Event DownloadVendorByTaxIdentificationCompleted As DownloadVendorByTaxIdentificationCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateVendorCompleted As UpdateVendorCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateVendorContactCompleted As UpdateVendorContactCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateVendorInsuranceCompleted As UpdateVendorInsuranceCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateVendorLocationCompleted As UpdateVendorLocationCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://VillageManagementSoftware.com/RequestServerUTC", RequestNamespace:="http://VillageManagementSoftware.com/", ResponseNamespace:="http://VillageManagementSoftware.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RequestServerUTC(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String) As String
            Dim results() As Object = Me.Invoke("RequestServerUTC", New Object() {PartnerKey, VendorID, VendorPassword})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginRequestServerUTC(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("RequestServerUTC", New Object() {PartnerKey, VendorID, VendorPassword}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndRequestServerUTC(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RequestServerUTCAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String)
            Me.RequestServerUTCAsync(PartnerKey, VendorID, VendorPassword, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RequestServerUTCAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal userState As Object)
            If (Me.RequestServerUTCOperationCompleted Is Nothing) Then
                Me.RequestServerUTCOperationCompleted = AddressOf Me.OnRequestServerUTCOperationCompleted
            End If
            Me.InvokeAsync("RequestServerUTC", New Object() {PartnerKey, VendorID, VendorPassword}, Me.RequestServerUTCOperationCompleted, userState)
        End Sub
        
        Private Sub OnRequestServerUTCOperationCompleted(ByVal arg As Object)
            If (Not (Me.RequestServerUTCCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RequestServerUTCCompleted(Me, New RequestServerUTCCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://VillageManagementSoftware.com/RequestServiceVersion", RequestNamespace:="http://VillageManagementSoftware.com/", ResponseNamespace:="http://VillageManagementSoftware.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RequestServiceVersion(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String) As String
            Dim results() As Object = Me.Invoke("RequestServiceVersion", New Object() {PartnerKey, VendorID, VendorPassword})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginRequestServiceVersion(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("RequestServiceVersion", New Object() {PartnerKey, VendorID, VendorPassword}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndRequestServiceVersion(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RequestServiceVersionAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String)
            Me.RequestServiceVersionAsync(PartnerKey, VendorID, VendorPassword, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RequestServiceVersionAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal userState As Object)
            If (Me.RequestServiceVersionOperationCompleted Is Nothing) Then
                Me.RequestServiceVersionOperationCompleted = AddressOf Me.OnRequestServiceVersionOperationCompleted
            End If
            Me.InvokeAsync("RequestServiceVersion", New Object() {PartnerKey, VendorID, VendorPassword}, Me.RequestServiceVersionOperationCompleted, userState)
        End Sub
        
        Private Sub OnRequestServiceVersionOperationCompleted(ByVal arg As Object)
            If (Not (Me.RequestServiceVersionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RequestServiceVersionCompleted(Me, New RequestServiceVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://VillageManagementSoftware.com/ARPostTransaction", RequestNamespace:="http://VillageManagementSoftware.com/", ResponseNamespace:="http://VillageManagementSoftware.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ARPostTransaction(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal XML As String) As String
            Dim results() As Object = Me.Invoke("ARPostTransaction", New Object() {PartnerKey, VendorID, VendorPassword, XML})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginARPostTransaction(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal XML As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ARPostTransaction", New Object() {PartnerKey, VendorID, VendorPassword, XML}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndARPostTransaction(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ARPostTransactionAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal XML As String)
            Me.ARPostTransactionAsync(PartnerKey, VendorID, VendorPassword, XML, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ARPostTransactionAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal XML As String, ByVal userState As Object)
            If (Me.ARPostTransactionOperationCompleted Is Nothing) Then
                Me.ARPostTransactionOperationCompleted = AddressOf Me.OnARPostTransactionOperationCompleted
            End If
            Me.InvokeAsync("ARPostTransaction", New Object() {PartnerKey, VendorID, VendorPassword, XML}, Me.ARPostTransactionOperationCompleted, userState)
        End Sub
        
        Private Sub OnARPostTransactionOperationCompleted(ByVal arg As Object)
            If (Not (Me.ARPostTransactionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ARPostTransactionCompleted(Me, New ARPostTransactionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://VillageManagementSoftware.com/APAddVoucherUsingXML", RequestNamespace:="http://VillageManagementSoftware.com/", ResponseNamespace:="http://VillageManagementSoftware.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function APAddVoucherUsingXML(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal XMLData As String, ByVal EmployeeID As Integer) As String
            Dim results() As Object = Me.Invoke("APAddVoucherUsingXML", New Object() {PartnerKey, VendorID, VendorPassword, XMLData, EmployeeID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginAPAddVoucherUsingXML(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal XMLData As String, ByVal EmployeeID As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("APAddVoucherUsingXML", New Object() {PartnerKey, VendorID, VendorPassword, XMLData, EmployeeID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndAPAddVoucherUsingXML(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub APAddVoucherUsingXMLAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal XMLData As String, ByVal EmployeeID As Integer)
            Me.APAddVoucherUsingXMLAsync(PartnerKey, VendorID, VendorPassword, XMLData, EmployeeID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub APAddVoucherUsingXMLAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal XMLData As String, ByVal EmployeeID As Integer, ByVal userState As Object)
            If (Me.APAddVoucherUsingXMLOperationCompleted Is Nothing) Then
                Me.APAddVoucherUsingXMLOperationCompleted = AddressOf Me.OnAPAddVoucherUsingXMLOperationCompleted
            End If
            Me.InvokeAsync("APAddVoucherUsingXML", New Object() {PartnerKey, VendorID, VendorPassword, XMLData, EmployeeID}, Me.APAddVoucherUsingXMLOperationCompleted, userState)
        End Sub
        
        Private Sub OnAPAddVoucherUsingXMLOperationCompleted(ByVal arg As Object)
            If (Not (Me.APAddVoucherUsingXMLCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent APAddVoucherUsingXMLCompleted(Me, New APAddVoucherUsingXMLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://VillageManagementSoftware.com/APAddVoucherFile", RequestNamespace:="http://VillageManagementSoftware.com/", ResponseNamespace:="http://VillageManagementSoftware.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function APAddVoucherFile(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal XMLData As String, ByVal EmployeeID As Integer) As String
            Dim results() As Object = Me.Invoke("APAddVoucherFile", New Object() {PartnerKey, VendorID, VendorPassword, XMLData, EmployeeID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginAPAddVoucherFile(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal XMLData As String, ByVal EmployeeID As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("APAddVoucherFile", New Object() {PartnerKey, VendorID, VendorPassword, XMLData, EmployeeID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndAPAddVoucherFile(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub APAddVoucherFileAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal XMLData As String, ByVal EmployeeID As Integer)
            Me.APAddVoucherFileAsync(PartnerKey, VendorID, VendorPassword, XMLData, EmployeeID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub APAddVoucherFileAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal XMLData As String, ByVal EmployeeID As Integer, ByVal userState As Object)
            If (Me.APAddVoucherFileOperationCompleted Is Nothing) Then
                Me.APAddVoucherFileOperationCompleted = AddressOf Me.OnAPAddVoucherFileOperationCompleted
            End If
            Me.InvokeAsync("APAddVoucherFile", New Object() {PartnerKey, VendorID, VendorPassword, XMLData, EmployeeID}, Me.APAddVoucherFileOperationCompleted, userState)
        End Sub
        
        Private Sub OnAPAddVoucherFileOperationCompleted(ByVal arg As Object)
            If (Not (Me.APAddVoucherFileCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent APAddVoucherFileCompleted(Me, New APAddVoucherFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://VillageManagementSoftware.com/APApproveVoucher", RequestNamespace:="http://VillageManagementSoftware.com/", ResponseNamespace:="http://VillageManagementSoftware.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function APApproveVoucher(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal VendorPayID As String, ByVal EmployeeID As Integer) As String
            Dim results() As Object = Me.Invoke("APApproveVoucher", New Object() {PartnerKey, VendorID, VendorPassword, VendorPayID, EmployeeID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginAPApproveVoucher(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal VendorPayID As String, ByVal EmployeeID As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("APApproveVoucher", New Object() {PartnerKey, VendorID, VendorPassword, VendorPayID, EmployeeID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndAPApproveVoucher(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub APApproveVoucherAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal VendorPayID As String, ByVal EmployeeID As Integer)
            Me.APApproveVoucherAsync(PartnerKey, VendorID, VendorPassword, VendorPayID, EmployeeID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub APApproveVoucherAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal VendorPayID As String, ByVal EmployeeID As Integer, ByVal userState As Object)
            If (Me.APApproveVoucherOperationCompleted Is Nothing) Then
                Me.APApproveVoucherOperationCompleted = AddressOf Me.OnAPApproveVoucherOperationCompleted
            End If
            Me.InvokeAsync("APApproveVoucher", New Object() {PartnerKey, VendorID, VendorPassword, VendorPayID, EmployeeID}, Me.APApproveVoucherOperationCompleted, userState)
        End Sub
        
        Private Sub OnAPApproveVoucherOperationCompleted(ByVal arg As Object)
            If (Not (Me.APApproveVoucherCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent APApproveVoucherCompleted(Me, New APApproveVoucherCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://VillageManagementSoftware.com/APGetVouchers", RequestNamespace:="http://VillageManagementSoftware.com/", ResponseNamespace:="http://VillageManagementSoftware.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function APGetVouchers(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal VendorPayID As String, ByVal AssociationID As Integer, ByVal BeginDueDate As Date, ByVal EndDueDate As Date, ByVal BeginCheckDate As Date, ByVal EndCheckDate As Date, ByVal OpenedOnly As Boolean, ByVal ParameterXML As String) As String
            Dim results() As Object = Me.Invoke("APGetVouchers", New Object() {PartnerKey, VendorID, VendorPassword, VendorPayID, AssociationID, BeginDueDate, EndDueDate, BeginCheckDate, EndCheckDate, OpenedOnly, ParameterXML})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginAPGetVouchers(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal VendorPayID As String, ByVal AssociationID As Integer, ByVal BeginDueDate As Date, ByVal EndDueDate As Date, ByVal BeginCheckDate As Date, ByVal EndCheckDate As Date, ByVal OpenedOnly As Boolean, ByVal ParameterXML As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("APGetVouchers", New Object() {PartnerKey, VendorID, VendorPassword, VendorPayID, AssociationID, BeginDueDate, EndDueDate, BeginCheckDate, EndCheckDate, OpenedOnly, ParameterXML}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndAPGetVouchers(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub APGetVouchersAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal VendorPayID As String, ByVal AssociationID As Integer, ByVal BeginDueDate As Date, ByVal EndDueDate As Date, ByVal BeginCheckDate As Date, ByVal EndCheckDate As Date, ByVal OpenedOnly As Boolean, ByVal ParameterXML As String)
            Me.APGetVouchersAsync(PartnerKey, VendorID, VendorPassword, VendorPayID, AssociationID, BeginDueDate, EndDueDate, BeginCheckDate, EndCheckDate, OpenedOnly, ParameterXML, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub APGetVouchersAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal VendorPayID As String, ByVal AssociationID As Integer, ByVal BeginDueDate As Date, ByVal EndDueDate As Date, ByVal BeginCheckDate As Date, ByVal EndCheckDate As Date, ByVal OpenedOnly As Boolean, ByVal ParameterXML As String, ByVal userState As Object)
            If (Me.APGetVouchersOperationCompleted Is Nothing) Then
                Me.APGetVouchersOperationCompleted = AddressOf Me.OnAPGetVouchersOperationCompleted
            End If
            Me.InvokeAsync("APGetVouchers", New Object() {PartnerKey, VendorID, VendorPassword, VendorPayID, AssociationID, BeginDueDate, EndDueDate, BeginCheckDate, EndCheckDate, OpenedOnly, ParameterXML}, Me.APGetVouchersOperationCompleted, userState)
        End Sub
        
        Private Sub OnAPGetVouchersOperationCompleted(ByVal arg As Object)
            If (Not (Me.APGetVouchersCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent APGetVouchersCompleted(Me, New APGetVouchersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://VillageManagementSoftware.com/APMergeVouchers", RequestNamespace:="http://VillageManagementSoftware.com/", ResponseNamespace:="http://VillageManagementSoftware.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function APMergeVouchers(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal XMLData As String, ByVal EmployeeID As Integer) As String
            Dim results() As Object = Me.Invoke("APMergeVouchers", New Object() {PartnerKey, VendorID, VendorPassword, XMLData, EmployeeID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginAPMergeVouchers(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal XMLData As String, ByVal EmployeeID As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("APMergeVouchers", New Object() {PartnerKey, VendorID, VendorPassword, XMLData, EmployeeID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndAPMergeVouchers(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub APMergeVouchersAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal XMLData As String, ByVal EmployeeID As Integer)
            Me.APMergeVouchersAsync(PartnerKey, VendorID, VendorPassword, XMLData, EmployeeID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub APMergeVouchersAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal XMLData As String, ByVal EmployeeID As Integer, ByVal userState As Object)
            If (Me.APMergeVouchersOperationCompleted Is Nothing) Then
                Me.APMergeVouchersOperationCompleted = AddressOf Me.OnAPMergeVouchersOperationCompleted
            End If
            Me.InvokeAsync("APMergeVouchers", New Object() {PartnerKey, VendorID, VendorPassword, XMLData, EmployeeID}, Me.APMergeVouchersOperationCompleted, userState)
        End Sub
        
        Private Sub OnAPMergeVouchersOperationCompleted(ByVal arg As Object)
            If (Not (Me.APMergeVouchersCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent APMergeVouchersCompleted(Me, New APMergeVouchersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://VillageManagementSoftware.com/APPostPayment", RequestNamespace:="http://VillageManagementSoftware.com/", ResponseNamespace:="http://VillageManagementSoftware.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function APPostPayment(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal VendorPayID As String, ByVal CheckDate As Date, ByVal CheckAmount As Decimal, ByVal CheckNumber As String, ByVal PaymentMethod As String, ByVal EmployeeID As Integer) As String
            Dim results() As Object = Me.Invoke("APPostPayment", New Object() {PartnerKey, VendorID, VendorPassword, VendorPayID, CheckDate, CheckAmount, CheckNumber, PaymentMethod, EmployeeID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginAPPostPayment(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal VendorPayID As String, ByVal CheckDate As Date, ByVal CheckAmount As Decimal, ByVal CheckNumber As String, ByVal PaymentMethod As String, ByVal EmployeeID As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("APPostPayment", New Object() {PartnerKey, VendorID, VendorPassword, VendorPayID, CheckDate, CheckAmount, CheckNumber, PaymentMethod, EmployeeID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndAPPostPayment(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub APPostPaymentAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal VendorPayID As String, ByVal CheckDate As Date, ByVal CheckAmount As Decimal, ByVal CheckNumber As String, ByVal PaymentMethod As String, ByVal EmployeeID As Integer)
            Me.APPostPaymentAsync(PartnerKey, VendorID, VendorPassword, VendorPayID, CheckDate, CheckAmount, CheckNumber, PaymentMethod, EmployeeID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub APPostPaymentAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal VendorPayID As String, ByVal CheckDate As Date, ByVal CheckAmount As Decimal, ByVal CheckNumber As String, ByVal PaymentMethod As String, ByVal EmployeeID As Integer, ByVal userState As Object)
            If (Me.APPostPaymentOperationCompleted Is Nothing) Then
                Me.APPostPaymentOperationCompleted = AddressOf Me.OnAPPostPaymentOperationCompleted
            End If
            Me.InvokeAsync("APPostPayment", New Object() {PartnerKey, VendorID, VendorPassword, VendorPayID, CheckDate, CheckAmount, CheckNumber, PaymentMethod, EmployeeID}, Me.APPostPaymentOperationCompleted, userState)
        End Sub
        
        Private Sub OnAPPostPaymentOperationCompleted(ByVal arg As Object)
            If (Not (Me.APPostPaymentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent APPostPaymentCompleted(Me, New APPostPaymentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://VillageManagementSoftware.com/APProcessVoucher", RequestNamespace:="http://VillageManagementSoftware.com/", ResponseNamespace:="http://VillageManagementSoftware.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function APProcessVoucher(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal VendorPayID As String, ByVal EmployeeID As Integer, ByVal ResidentContactID As Integer) As String
            Dim results() As Object = Me.Invoke("APProcessVoucher", New Object() {PartnerKey, VendorID, VendorPassword, VendorPayID, EmployeeID, ResidentContactID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginAPProcessVoucher(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal VendorPayID As String, ByVal EmployeeID As Integer, ByVal ResidentContactID As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("APProcessVoucher", New Object() {PartnerKey, VendorID, VendorPassword, VendorPayID, EmployeeID, ResidentContactID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndAPProcessVoucher(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub APProcessVoucherAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal VendorPayID As String, ByVal EmployeeID As Integer, ByVal ResidentContactID As Integer)
            Me.APProcessVoucherAsync(PartnerKey, VendorID, VendorPassword, VendorPayID, EmployeeID, ResidentContactID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub APProcessVoucherAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal VendorPayID As String, ByVal EmployeeID As Integer, ByVal ResidentContactID As Integer, ByVal userState As Object)
            If (Me.APProcessVoucherOperationCompleted Is Nothing) Then
                Me.APProcessVoucherOperationCompleted = AddressOf Me.OnAPProcessVoucherOperationCompleted
            End If
            Me.InvokeAsync("APProcessVoucher", New Object() {PartnerKey, VendorID, VendorPassword, VendorPayID, EmployeeID, ResidentContactID}, Me.APProcessVoucherOperationCompleted, userState)
        End Sub
        
        Private Sub OnAPProcessVoucherOperationCompleted(ByVal arg As Object)
            If (Not (Me.APProcessVoucherCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent APProcessVoucherCompleted(Me, New APProcessVoucherCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://VillageManagementSoftware.com/APUnProcessVoucher", RequestNamespace:="http://VillageManagementSoftware.com/", ResponseNamespace:="http://VillageManagementSoftware.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function APUnProcessVoucher(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal VendorPayID As String, ByVal EmployeeID As Integer, ByVal ResidentContactID As Integer) As String
            Dim results() As Object = Me.Invoke("APUnProcessVoucher", New Object() {PartnerKey, VendorID, VendorPassword, VendorPayID, EmployeeID, ResidentContactID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginAPUnProcessVoucher(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal VendorPayID As String, ByVal EmployeeID As Integer, ByVal ResidentContactID As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("APUnProcessVoucher", New Object() {PartnerKey, VendorID, VendorPassword, VendorPayID, EmployeeID, ResidentContactID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndAPUnProcessVoucher(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub APUnProcessVoucherAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal VendorPayID As String, ByVal EmployeeID As Integer, ByVal ResidentContactID As Integer)
            Me.APUnProcessVoucherAsync(PartnerKey, VendorID, VendorPassword, VendorPayID, EmployeeID, ResidentContactID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub APUnProcessVoucherAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal VendorPayID As String, ByVal EmployeeID As Integer, ByVal ResidentContactID As Integer, ByVal userState As Object)
            If (Me.APUnProcessVoucherOperationCompleted Is Nothing) Then
                Me.APUnProcessVoucherOperationCompleted = AddressOf Me.OnAPUnProcessVoucherOperationCompleted
            End If
            Me.InvokeAsync("APUnProcessVoucher", New Object() {PartnerKey, VendorID, VendorPassword, VendorPayID, EmployeeID, ResidentContactID}, Me.APUnProcessVoucherOperationCompleted, userState)
        End Sub
        
        Private Sub OnAPUnProcessVoucherOperationCompleted(ByVal arg As Object)
            If (Not (Me.APUnProcessVoucherCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent APUnProcessVoucherCompleted(Me, New APUnProcessVoucherCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://VillageManagementSoftware.com/APVoidPayment", RequestNamespace:="http://VillageManagementSoftware.com/", ResponseNamespace:="http://VillageManagementSoftware.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function APVoidPayment(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal VendorPayPaymentID As String, ByVal VoidDate As Date, ByVal EmployeeID As Integer) As String
            Dim results() As Object = Me.Invoke("APVoidPayment", New Object() {PartnerKey, VendorID, VendorPassword, VendorPayPaymentID, VoidDate, EmployeeID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginAPVoidPayment(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal VendorPayPaymentID As String, ByVal VoidDate As Date, ByVal EmployeeID As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("APVoidPayment", New Object() {PartnerKey, VendorID, VendorPassword, VendorPayPaymentID, VoidDate, EmployeeID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndAPVoidPayment(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub APVoidPaymentAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal VendorPayPaymentID As String, ByVal VoidDate As Date, ByVal EmployeeID As Integer)
            Me.APVoidPaymentAsync(PartnerKey, VendorID, VendorPassword, VendorPayPaymentID, VoidDate, EmployeeID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub APVoidPaymentAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal VendorPayPaymentID As String, ByVal VoidDate As Date, ByVal EmployeeID As Integer, ByVal userState As Object)
            If (Me.APVoidPaymentOperationCompleted Is Nothing) Then
                Me.APVoidPaymentOperationCompleted = AddressOf Me.OnAPVoidPaymentOperationCompleted
            End If
            Me.InvokeAsync("APVoidPayment", New Object() {PartnerKey, VendorID, VendorPassword, VendorPayPaymentID, VoidDate, EmployeeID}, Me.APVoidPaymentOperationCompleted, userState)
        End Sub
        
        Private Sub OnAPVoidPaymentOperationCompleted(ByVal arg As Object)
            If (Not (Me.APVoidPaymentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent APVoidPaymentCompleted(Me, New APVoidPaymentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://VillageManagementSoftware.com/CommerceOrder", RequestNamespace:="http://VillageManagementSoftware.com/", ResponseNamespace:="http://VillageManagementSoftware.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CommerceOrder(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal CommerceRecordXML As String) As String
            Dim results() As Object = Me.Invoke("CommerceOrder", New Object() {PartnerKey, VendorID, VendorPassword, CommerceRecordXML})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginCommerceOrder(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal CommerceRecordXML As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CommerceOrder", New Object() {PartnerKey, VendorID, VendorPassword, CommerceRecordXML}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndCommerceOrder(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CommerceOrderAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal CommerceRecordXML As String)
            Me.CommerceOrderAsync(PartnerKey, VendorID, VendorPassword, CommerceRecordXML, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CommerceOrderAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal CommerceRecordXML As String, ByVal userState As Object)
            If (Me.CommerceOrderOperationCompleted Is Nothing) Then
                Me.CommerceOrderOperationCompleted = AddressOf Me.OnCommerceOrderOperationCompleted
            End If
            Me.InvokeAsync("CommerceOrder", New Object() {PartnerKey, VendorID, VendorPassword, CommerceRecordXML}, Me.CommerceOrderOperationCompleted, userState)
        End Sub
        
        Private Sub OnCommerceOrderOperationCompleted(ByVal arg As Object)
            If (Not (Me.CommerceOrderCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CommerceOrderCompleted(Me, New CommerceOrderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://VillageManagementSoftware.com/DownloadCompliance", RequestNamespace:="http://VillageManagementSoftware.com/", ResponseNamespace:="http://VillageManagementSoftware.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DownloadCompliance(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal CompanyKey As Integer, ByVal ResidentKey As Long, ByVal ComplianceKey As Long, ByVal IncludeClosed As Boolean) As String
            Dim results() As Object = Me.Invoke("DownloadCompliance", New Object() {PartnerKey, VendorID, VendorPassword, CompanyKey, ResidentKey, ComplianceKey, IncludeClosed})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginDownloadCompliance(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal CompanyKey As Integer, ByVal ResidentKey As Long, ByVal ComplianceKey As Long, ByVal IncludeClosed As Boolean, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("DownloadCompliance", New Object() {PartnerKey, VendorID, VendorPassword, CompanyKey, ResidentKey, ComplianceKey, IncludeClosed}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndDownloadCompliance(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DownloadComplianceAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal CompanyKey As Integer, ByVal ResidentKey As Long, ByVal ComplianceKey As Long, ByVal IncludeClosed As Boolean)
            Me.DownloadComplianceAsync(PartnerKey, VendorID, VendorPassword, CompanyKey, ResidentKey, ComplianceKey, IncludeClosed, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DownloadComplianceAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal CompanyKey As Integer, ByVal ResidentKey As Long, ByVal ComplianceKey As Long, ByVal IncludeClosed As Boolean, ByVal userState As Object)
            If (Me.DownloadComplianceOperationCompleted Is Nothing) Then
                Me.DownloadComplianceOperationCompleted = AddressOf Me.OnDownloadComplianceOperationCompleted
            End If
            Me.InvokeAsync("DownloadCompliance", New Object() {PartnerKey, VendorID, VendorPassword, CompanyKey, ResidentKey, ComplianceKey, IncludeClosed}, Me.DownloadComplianceOperationCompleted, userState)
        End Sub
        
        Private Sub OnDownloadComplianceOperationCompleted(ByVal arg As Object)
            If (Not (Me.DownloadComplianceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DownloadComplianceCompleted(Me, New DownloadComplianceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://VillageManagementSoftware.com/DownloadComplianceDS", RequestNamespace:="http://VillageManagementSoftware.com/", ResponseNamespace:="http://VillageManagementSoftware.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DownloadComplianceDS(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal CompanyKey As Integer, ByVal ResidentKey As Long, ByVal ComplianceKey As Long, ByVal IncludeClosed As Boolean) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("DownloadComplianceDS", New Object() {PartnerKey, VendorID, VendorPassword, CompanyKey, ResidentKey, ComplianceKey, IncludeClosed})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginDownloadComplianceDS(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal CompanyKey As Integer, ByVal ResidentKey As Long, ByVal ComplianceKey As Long, ByVal IncludeClosed As Boolean, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("DownloadComplianceDS", New Object() {PartnerKey, VendorID, VendorPassword, CompanyKey, ResidentKey, ComplianceKey, IncludeClosed}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndDownloadComplianceDS(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DownloadComplianceDSAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal CompanyKey As Integer, ByVal ResidentKey As Long, ByVal ComplianceKey As Long, ByVal IncludeClosed As Boolean)
            Me.DownloadComplianceDSAsync(PartnerKey, VendorID, VendorPassword, CompanyKey, ResidentKey, ComplianceKey, IncludeClosed, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DownloadComplianceDSAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal CompanyKey As Integer, ByVal ResidentKey As Long, ByVal ComplianceKey As Long, ByVal IncludeClosed As Boolean, ByVal userState As Object)
            If (Me.DownloadComplianceDSOperationCompleted Is Nothing) Then
                Me.DownloadComplianceDSOperationCompleted = AddressOf Me.OnDownloadComplianceDSOperationCompleted
            End If
            Me.InvokeAsync("DownloadComplianceDS", New Object() {PartnerKey, VendorID, VendorPassword, CompanyKey, ResidentKey, ComplianceKey, IncludeClosed}, Me.DownloadComplianceDSOperationCompleted, userState)
        End Sub
        
        Private Sub OnDownloadComplianceDSOperationCompleted(ByVal arg As Object)
            If (Not (Me.DownloadComplianceDSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DownloadComplianceDSCompleted(Me, New DownloadComplianceDSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://VillageManagementSoftware.com/PostComplianceFine", RequestNamespace:="http://VillageManagementSoftware.com/", ResponseNamespace:="http://VillageManagementSoftware.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PostComplianceFine(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal ComplianceKey As Long, ByVal FineAmount As Decimal) As String
            Dim results() As Object = Me.Invoke("PostComplianceFine", New Object() {PartnerKey, VendorID, VendorPassword, ComplianceKey, FineAmount})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginPostComplianceFine(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal ComplianceKey As Long, ByVal FineAmount As Decimal, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("PostComplianceFine", New Object() {PartnerKey, VendorID, VendorPassword, ComplianceKey, FineAmount}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndPostComplianceFine(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PostComplianceFineAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal ComplianceKey As Long, ByVal FineAmount As Decimal)
            Me.PostComplianceFineAsync(PartnerKey, VendorID, VendorPassword, ComplianceKey, FineAmount, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PostComplianceFineAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal ComplianceKey As Long, ByVal FineAmount As Decimal, ByVal userState As Object)
            If (Me.PostComplianceFineOperationCompleted Is Nothing) Then
                Me.PostComplianceFineOperationCompleted = AddressOf Me.OnPostComplianceFineOperationCompleted
            End If
            Me.InvokeAsync("PostComplianceFine", New Object() {PartnerKey, VendorID, VendorPassword, ComplianceKey, FineAmount}, Me.PostComplianceFineOperationCompleted, userState)
        End Sub
        
        Private Sub OnPostComplianceFineOperationCompleted(ByVal arg As Object)
            If (Not (Me.PostComplianceFineCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PostComplianceFineCompleted(Me, New PostComplianceFineCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://VillageManagementSoftware.com/UpdateCompliance", RequestNamespace:="http://VillageManagementSoftware.com/", ResponseNamespace:="http://VillageManagementSoftware.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateCompliance(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal ComplianceRecordXML As String) As String
            Dim results() As Object = Me.Invoke("UpdateCompliance", New Object() {PartnerKey, VendorID, VendorPassword, ComplianceRecordXML})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateCompliance(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal ComplianceRecordXML As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateCompliance", New Object() {PartnerKey, VendorID, VendorPassword, ComplianceRecordXML}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateCompliance(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateComplianceAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal ComplianceRecordXML As String)
            Me.UpdateComplianceAsync(PartnerKey, VendorID, VendorPassword, ComplianceRecordXML, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateComplianceAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal ComplianceRecordXML As String, ByVal userState As Object)
            If (Me.UpdateComplianceOperationCompleted Is Nothing) Then
                Me.UpdateComplianceOperationCompleted = AddressOf Me.OnUpdateComplianceOperationCompleted
            End If
            Me.InvokeAsync("UpdateCompliance", New Object() {PartnerKey, VendorID, VendorPassword, ComplianceRecordXML}, Me.UpdateComplianceOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateComplianceOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateComplianceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateComplianceCompleted(Me, New UpdateComplianceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://VillageManagementSoftware.com/UpdateComplianceSequence", RequestNamespace:="http://VillageManagementSoftware.com/", ResponseNamespace:="http://VillageManagementSoftware.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateComplianceSequence(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal ComplianceSequenceRecordXML As String) As String
            Dim results() As Object = Me.Invoke("UpdateComplianceSequence", New Object() {PartnerKey, VendorID, VendorPassword, ComplianceSequenceRecordXML})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateComplianceSequence(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal ComplianceSequenceRecordXML As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateComplianceSequence", New Object() {PartnerKey, VendorID, VendorPassword, ComplianceSequenceRecordXML}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateComplianceSequence(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateComplianceSequenceAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal ComplianceSequenceRecordXML As String)
            Me.UpdateComplianceSequenceAsync(PartnerKey, VendorID, VendorPassword, ComplianceSequenceRecordXML, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateComplianceSequenceAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal ComplianceSequenceRecordXML As String, ByVal userState As Object)
            If (Me.UpdateComplianceSequenceOperationCompleted Is Nothing) Then
                Me.UpdateComplianceSequenceOperationCompleted = AddressOf Me.OnUpdateComplianceSequenceOperationCompleted
            End If
            Me.InvokeAsync("UpdateComplianceSequence", New Object() {PartnerKey, VendorID, VendorPassword, ComplianceSequenceRecordXML}, Me.UpdateComplianceSequenceOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateComplianceSequenceOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateComplianceSequenceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateComplianceSequenceCompleted(Me, New UpdateComplianceSequenceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://VillageManagementSoftware.com/DeleteInsurerContact", RequestNamespace:="http://VillageManagementSoftware.com/", ResponseNamespace:="http://VillageManagementSoftware.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteInsurerContact(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal InsuranceContactKey As Integer) As String
            Dim results() As Object = Me.Invoke("DeleteInsurerContact", New Object() {PartnerKey, VendorID, VendorPassword, InsuranceContactKey})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginDeleteInsurerContact(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal InsuranceContactKey As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("DeleteInsurerContact", New Object() {PartnerKey, VendorID, VendorPassword, InsuranceContactKey}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndDeleteInsurerContact(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteInsurerContactAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal InsuranceContactKey As Integer)
            Me.DeleteInsurerContactAsync(PartnerKey, VendorID, VendorPassword, InsuranceContactKey, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteInsurerContactAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal InsuranceContactKey As Integer, ByVal userState As Object)
            If (Me.DeleteInsurerContactOperationCompleted Is Nothing) Then
                Me.DeleteInsurerContactOperationCompleted = AddressOf Me.OnDeleteInsurerContactOperationCompleted
            End If
            Me.InvokeAsync("DeleteInsurerContact", New Object() {PartnerKey, VendorID, VendorPassword, InsuranceContactKey}, Me.DeleteInsurerContactOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteInsurerContactOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteInsurerContactCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteInsurerContactCompleted(Me, New DeleteInsurerContactCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://VillageManagementSoftware.com/DownloadInsurer", RequestNamespace:="http://VillageManagementSoftware.com/", ResponseNamespace:="http://VillageManagementSoftware.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DownloadInsurer(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal InformationBitMap As Long, ByVal PeriodDate As Date) As String
            Dim results() As Object = Me.Invoke("DownloadInsurer", New Object() {PartnerKey, VendorID, VendorPassword, InformationBitMap, PeriodDate})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginDownloadInsurer(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal InformationBitMap As Long, ByVal PeriodDate As Date, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("DownloadInsurer", New Object() {PartnerKey, VendorID, VendorPassword, InformationBitMap, PeriodDate}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndDownloadInsurer(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DownloadInsurerAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal InformationBitMap As Long, ByVal PeriodDate As Date)
            Me.DownloadInsurerAsync(PartnerKey, VendorID, VendorPassword, InformationBitMap, PeriodDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DownloadInsurerAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal InformationBitMap As Long, ByVal PeriodDate As Date, ByVal userState As Object)
            If (Me.DownloadInsurerOperationCompleted Is Nothing) Then
                Me.DownloadInsurerOperationCompleted = AddressOf Me.OnDownloadInsurerOperationCompleted
            End If
            Me.InvokeAsync("DownloadInsurer", New Object() {PartnerKey, VendorID, VendorPassword, InformationBitMap, PeriodDate}, Me.DownloadInsurerOperationCompleted, userState)
        End Sub
        
        Private Sub OnDownloadInsurerOperationCompleted(ByVal arg As Object)
            If (Not (Me.DownloadInsurerCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DownloadInsurerCompleted(Me, New DownloadInsurerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://VillageManagementSoftware.com/DownloadInsurerDS", RequestNamespace:="http://VillageManagementSoftware.com/", ResponseNamespace:="http://VillageManagementSoftware.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DownloadInsurerDS(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal InformationBitMap As Long, ByVal PeriodDate As Date) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("DownloadInsurerDS", New Object() {PartnerKey, VendorID, VendorPassword, InformationBitMap, PeriodDate})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginDownloadInsurerDS(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal InformationBitMap As Long, ByVal PeriodDate As Date, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("DownloadInsurerDS", New Object() {PartnerKey, VendorID, VendorPassword, InformationBitMap, PeriodDate}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndDownloadInsurerDS(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DownloadInsurerDSAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal InformationBitMap As Long, ByVal PeriodDate As Date)
            Me.DownloadInsurerDSAsync(PartnerKey, VendorID, VendorPassword, InformationBitMap, PeriodDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DownloadInsurerDSAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal InformationBitMap As Long, ByVal PeriodDate As Date, ByVal userState As Object)
            If (Me.DownloadInsurerDSOperationCompleted Is Nothing) Then
                Me.DownloadInsurerDSOperationCompleted = AddressOf Me.OnDownloadInsurerDSOperationCompleted
            End If
            Me.InvokeAsync("DownloadInsurerDS", New Object() {PartnerKey, VendorID, VendorPassword, InformationBitMap, PeriodDate}, Me.DownloadInsurerDSOperationCompleted, userState)
        End Sub
        
        Private Sub OnDownloadInsurerDSOperationCompleted(ByVal arg As Object)
            If (Not (Me.DownloadInsurerDSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DownloadInsurerDSCompleted(Me, New DownloadInsurerDSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://VillageManagementSoftware.com/UpdateInsurer", RequestNamespace:="http://VillageManagementSoftware.com/", ResponseNamespace:="http://VillageManagementSoftware.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateInsurer(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal InsurerRecordXML As String) As String
            Dim results() As Object = Me.Invoke("UpdateInsurer", New Object() {PartnerKey, VendorID, VendorPassword, InsurerRecordXML})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateInsurer(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal InsurerRecordXML As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateInsurer", New Object() {PartnerKey, VendorID, VendorPassword, InsurerRecordXML}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateInsurer(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateInsurerAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal InsurerRecordXML As String)
            Me.UpdateInsurerAsync(PartnerKey, VendorID, VendorPassword, InsurerRecordXML, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateInsurerAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal InsurerRecordXML As String, ByVal userState As Object)
            If (Me.UpdateInsurerOperationCompleted Is Nothing) Then
                Me.UpdateInsurerOperationCompleted = AddressOf Me.OnUpdateInsurerOperationCompleted
            End If
            Me.InvokeAsync("UpdateInsurer", New Object() {PartnerKey, VendorID, VendorPassword, InsurerRecordXML}, Me.UpdateInsurerOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateInsurerOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateInsurerCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateInsurerCompleted(Me, New UpdateInsurerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://VillageManagementSoftware.com/UpdateInsurerContact", RequestNamespace:="http://VillageManagementSoftware.com/", ResponseNamespace:="http://VillageManagementSoftware.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateInsurerContact(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal InsurerContactRecordXML As String) As String
            Dim results() As Object = Me.Invoke("UpdateInsurerContact", New Object() {PartnerKey, VendorID, VendorPassword, InsurerContactRecordXML})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateInsurerContact(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal InsurerContactRecordXML As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateInsurerContact", New Object() {PartnerKey, VendorID, VendorPassword, InsurerContactRecordXML}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateInsurerContact(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateInsurerContactAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal InsurerContactRecordXML As String)
            Me.UpdateInsurerContactAsync(PartnerKey, VendorID, VendorPassword, InsurerContactRecordXML, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateInsurerContactAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal InsurerContactRecordXML As String, ByVal userState As Object)
            If (Me.UpdateInsurerContactOperationCompleted Is Nothing) Then
                Me.UpdateInsurerContactOperationCompleted = AddressOf Me.OnUpdateInsurerContactOperationCompleted
            End If
            Me.InvokeAsync("UpdateInsurerContact", New Object() {PartnerKey, VendorID, VendorPassword, InsurerContactRecordXML}, Me.UpdateInsurerContactOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateInsurerContactOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateInsurerContactCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateInsurerContactCompleted(Me, New UpdateInsurerContactCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://VillageManagementSoftware.com/GetBankAccountBalance", RequestNamespace:="http://VillageManagementSoftware.com/", ResponseNamespace:="http://VillageManagementSoftware.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetBankAccountBalance(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal GLAccountID As String) As String
            Dim results() As Object = Me.Invoke("GetBankAccountBalance", New Object() {PartnerKey, VendorID, VendorPassword, GLAccountID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginGetBankAccountBalance(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal GLAccountID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetBankAccountBalance", New Object() {PartnerKey, VendorID, VendorPassword, GLAccountID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetBankAccountBalance(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetBankAccountBalanceAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal GLAccountID As String)
            Me.GetBankAccountBalanceAsync(PartnerKey, VendorID, VendorPassword, GLAccountID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetBankAccountBalanceAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal GLAccountID As String, ByVal userState As Object)
            If (Me.GetBankAccountBalanceOperationCompleted Is Nothing) Then
                Me.GetBankAccountBalanceOperationCompleted = AddressOf Me.OnGetBankAccountBalanceOperationCompleted
            End If
            Me.InvokeAsync("GetBankAccountBalance", New Object() {PartnerKey, VendorID, VendorPassword, GLAccountID}, Me.GetBankAccountBalanceOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetBankAccountBalanceOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetBankAccountBalanceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetBankAccountBalanceCompleted(Me, New GetBankAccountBalanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://VillageManagementSoftware.com/GetPropertyDocumentURL", RequestNamespace:="http://VillageManagementSoftware.com/", ResponseNamespace:="http://VillageManagementSoftware.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPropertyDocumentURL(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal CompanyDocumentKey As Integer) As String
            Dim results() As Object = Me.Invoke("GetPropertyDocumentURL", New Object() {PartnerKey, VendorID, VendorPassword, CompanyDocumentKey})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginGetPropertyDocumentURL(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal CompanyDocumentKey As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetPropertyDocumentURL", New Object() {PartnerKey, VendorID, VendorPassword, CompanyDocumentKey}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetPropertyDocumentURL(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPropertyDocumentURLAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal CompanyDocumentKey As Integer)
            Me.GetPropertyDocumentURLAsync(PartnerKey, VendorID, VendorPassword, CompanyDocumentKey, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPropertyDocumentURLAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal CompanyDocumentKey As Integer, ByVal userState As Object)
            If (Me.GetPropertyDocumentURLOperationCompleted Is Nothing) Then
                Me.GetPropertyDocumentURLOperationCompleted = AddressOf Me.OnGetPropertyDocumentURLOperationCompleted
            End If
            Me.InvokeAsync("GetPropertyDocumentURL", New Object() {PartnerKey, VendorID, VendorPassword, CompanyDocumentKey}, Me.GetPropertyDocumentURLOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPropertyDocumentURLOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPropertyDocumentURLCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPropertyDocumentURLCompleted(Me, New GetPropertyDocumentURLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://VillageManagementSoftware.com/DocumentDownload", RequestNamespace:="http://VillageManagementSoftware.com/", ResponseNamespace:="http://VillageManagementSoftware.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DocumentDownload(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal DocumentArea As Long, ByVal DocumentID As Integer, ByVal ResidentContactID As Integer) As String
            Dim results() As Object = Me.Invoke("DocumentDownload", New Object() {PartnerKey, VendorID, VendorPassword, DocumentArea, DocumentID, ResidentContactID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginDocumentDownload(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal DocumentArea As Long, ByVal DocumentID As Integer, ByVal ResidentContactID As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("DocumentDownload", New Object() {PartnerKey, VendorID, VendorPassword, DocumentArea, DocumentID, ResidentContactID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndDocumentDownload(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DocumentDownloadAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal DocumentArea As Long, ByVal DocumentID As Integer, ByVal ResidentContactID As Integer)
            Me.DocumentDownloadAsync(PartnerKey, VendorID, VendorPassword, DocumentArea, DocumentID, ResidentContactID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DocumentDownloadAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal DocumentArea As Long, ByVal DocumentID As Integer, ByVal ResidentContactID As Integer, ByVal userState As Object)
            If (Me.DocumentDownloadOperationCompleted Is Nothing) Then
                Me.DocumentDownloadOperationCompleted = AddressOf Me.OnDocumentDownloadOperationCompleted
            End If
            Me.InvokeAsync("DocumentDownload", New Object() {PartnerKey, VendorID, VendorPassword, DocumentArea, DocumentID, ResidentContactID}, Me.DocumentDownloadOperationCompleted, userState)
        End Sub
        
        Private Sub OnDocumentDownloadOperationCompleted(ByVal arg As Object)
            If (Not (Me.DocumentDownloadCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DocumentDownloadCompleted(Me, New DocumentDownloadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://VillageManagementSoftware.com/DocumentsDownload", RequestNamespace:="http://VillageManagementSoftware.com/", ResponseNamespace:="http://VillageManagementSoftware.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DocumentsDownload(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal DocumentArea As Long, ByVal ParentID As Integer, ByVal ResidentContactID As Integer, ByVal DocumentMask As String) As String
            Dim results() As Object = Me.Invoke("DocumentsDownload", New Object() {PartnerKey, VendorID, VendorPassword, DocumentArea, ParentID, ResidentContactID, DocumentMask})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginDocumentsDownload(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal DocumentArea As Long, ByVal ParentID As Integer, ByVal ResidentContactID As Integer, ByVal DocumentMask As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("DocumentsDownload", New Object() {PartnerKey, VendorID, VendorPassword, DocumentArea, ParentID, ResidentContactID, DocumentMask}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndDocumentsDownload(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DocumentsDownloadAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal DocumentArea As Long, ByVal ParentID As Integer, ByVal ResidentContactID As Integer, ByVal DocumentMask As String)
            Me.DocumentsDownloadAsync(PartnerKey, VendorID, VendorPassword, DocumentArea, ParentID, ResidentContactID, DocumentMask, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DocumentsDownloadAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal DocumentArea As Long, ByVal ParentID As Integer, ByVal ResidentContactID As Integer, ByVal DocumentMask As String, ByVal userState As Object)
            If (Me.DocumentsDownloadOperationCompleted Is Nothing) Then
                Me.DocumentsDownloadOperationCompleted = AddressOf Me.OnDocumentsDownloadOperationCompleted
            End If
            Me.InvokeAsync("DocumentsDownload", New Object() {PartnerKey, VendorID, VendorPassword, DocumentArea, ParentID, ResidentContactID, DocumentMask}, Me.DocumentsDownloadOperationCompleted, userState)
        End Sub
        
        Private Sub OnDocumentsDownloadOperationCompleted(ByVal arg As Object)
            If (Not (Me.DocumentsDownloadCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DocumentsDownloadCompleted(Me, New DocumentsDownloadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://VillageManagementSoftware.com/DownloadPropertyDocuments", RequestNamespace:="http://VillageManagementSoftware.com/", ResponseNamespace:="http://VillageManagementSoftware.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DownloadPropertyDocuments(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal CommitteeKeys As String) As String
            Dim results() As Object = Me.Invoke("DownloadPropertyDocuments", New Object() {PartnerKey, VendorID, VendorPassword, CommitteeKeys})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginDownloadPropertyDocuments(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal CommitteeKeys As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("DownloadPropertyDocuments", New Object() {PartnerKey, VendorID, VendorPassword, CommitteeKeys}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndDownloadPropertyDocuments(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DownloadPropertyDocumentsAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal CommitteeKeys As String)
            Me.DownloadPropertyDocumentsAsync(PartnerKey, VendorID, VendorPassword, CommitteeKeys, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DownloadPropertyDocumentsAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal CommitteeKeys As String, ByVal userState As Object)
            If (Me.DownloadPropertyDocumentsOperationCompleted Is Nothing) Then
                Me.DownloadPropertyDocumentsOperationCompleted = AddressOf Me.OnDownloadPropertyDocumentsOperationCompleted
            End If
            Me.InvokeAsync("DownloadPropertyDocuments", New Object() {PartnerKey, VendorID, VendorPassword, CommitteeKeys}, Me.DownloadPropertyDocumentsOperationCompleted, userState)
        End Sub
        
        Private Sub OnDownloadPropertyDocumentsOperationCompleted(ByVal arg As Object)
            If (Not (Me.DownloadPropertyDocumentsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DownloadPropertyDocumentsCompleted(Me, New DownloadPropertyDocumentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://VillageManagementSoftware.com/DownloadProperty", RequestNamespace:="http://VillageManagementSoftware.com/", ResponseNamespace:="http://VillageManagementSoftware.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DownloadProperty(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal CompanyKey As Integer, ByVal ResidentKey As Integer, ByVal ResidentContactKey As Integer, ByVal InformationBitMap As Long, ByVal PeriodDate As Date) As String
            Dim results() As Object = Me.Invoke("DownloadProperty", New Object() {PartnerKey, VendorID, VendorPassword, CompanyKey, ResidentKey, ResidentContactKey, InformationBitMap, PeriodDate})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginDownloadProperty(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal CompanyKey As Integer, ByVal ResidentKey As Integer, ByVal ResidentContactKey As Integer, ByVal InformationBitMap As Long, ByVal PeriodDate As Date, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("DownloadProperty", New Object() {PartnerKey, VendorID, VendorPassword, CompanyKey, ResidentKey, ResidentContactKey, InformationBitMap, PeriodDate}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndDownloadProperty(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DownloadPropertyAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal CompanyKey As Integer, ByVal ResidentKey As Integer, ByVal ResidentContactKey As Integer, ByVal InformationBitMap As Long, ByVal PeriodDate As Date)
            Me.DownloadPropertyAsync(PartnerKey, VendorID, VendorPassword, CompanyKey, ResidentKey, ResidentContactKey, InformationBitMap, PeriodDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DownloadPropertyAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal CompanyKey As Integer, ByVal ResidentKey As Integer, ByVal ResidentContactKey As Integer, ByVal InformationBitMap As Long, ByVal PeriodDate As Date, ByVal userState As Object)
            If (Me.DownloadPropertyOperationCompleted Is Nothing) Then
                Me.DownloadPropertyOperationCompleted = AddressOf Me.OnDownloadPropertyOperationCompleted
            End If
            Me.InvokeAsync("DownloadProperty", New Object() {PartnerKey, VendorID, VendorPassword, CompanyKey, ResidentKey, ResidentContactKey, InformationBitMap, PeriodDate}, Me.DownloadPropertyOperationCompleted, userState)
        End Sub
        
        Private Sub OnDownloadPropertyOperationCompleted(ByVal arg As Object)
            If (Not (Me.DownloadPropertyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DownloadPropertyCompleted(Me, New DownloadPropertyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://VillageManagementSoftware.com/DownloadProperties", RequestNamespace:="http://VillageManagementSoftware.com/", ResponseNamespace:="http://VillageManagementSoftware.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DownloadProperties(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal CompanyKeys As String, ByVal ResidentKey As Integer, ByVal ResidentContactKey As Integer, ByVal InformationBitMap As Long, ByVal PeriodDate As Date, ByVal XML As String) As String
            Dim results() As Object = Me.Invoke("DownloadProperties", New Object() {PartnerKey, VendorID, VendorPassword, CompanyKeys, ResidentKey, ResidentContactKey, InformationBitMap, PeriodDate, XML})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginDownloadProperties(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal CompanyKeys As String, ByVal ResidentKey As Integer, ByVal ResidentContactKey As Integer, ByVal InformationBitMap As Long, ByVal PeriodDate As Date, ByVal XML As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("DownloadProperties", New Object() {PartnerKey, VendorID, VendorPassword, CompanyKeys, ResidentKey, ResidentContactKey, InformationBitMap, PeriodDate, XML}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndDownloadProperties(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DownloadPropertiesAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal CompanyKeys As String, ByVal ResidentKey As Integer, ByVal ResidentContactKey As Integer, ByVal InformationBitMap As Long, ByVal PeriodDate As Date, ByVal XML As String)
            Me.DownloadPropertiesAsync(PartnerKey, VendorID, VendorPassword, CompanyKeys, ResidentKey, ResidentContactKey, InformationBitMap, PeriodDate, XML, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DownloadPropertiesAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal CompanyKeys As String, ByVal ResidentKey As Integer, ByVal ResidentContactKey As Integer, ByVal InformationBitMap As Long, ByVal PeriodDate As Date, ByVal XML As String, ByVal userState As Object)
            If (Me.DownloadPropertiesOperationCompleted Is Nothing) Then
                Me.DownloadPropertiesOperationCompleted = AddressOf Me.OnDownloadPropertiesOperationCompleted
            End If
            Me.InvokeAsync("DownloadProperties", New Object() {PartnerKey, VendorID, VendorPassword, CompanyKeys, ResidentKey, ResidentContactKey, InformationBitMap, PeriodDate, XML}, Me.DownloadPropertiesOperationCompleted, userState)
        End Sub
        
        Private Sub OnDownloadPropertiesOperationCompleted(ByVal arg As Object)
            If (Not (Me.DownloadPropertiesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DownloadPropertiesCompleted(Me, New DownloadPropertiesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://VillageManagementSoftware.com/DownloadPropertyBlockList", RequestNamespace:="http://VillageManagementSoftware.com/", ResponseNamespace:="http://VillageManagementSoftware.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DownloadPropertyBlockList(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal CompanyKeyDivisor As Long, ByVal XML As String) As String
            Dim results() As Object = Me.Invoke("DownloadPropertyBlockList", New Object() {PartnerKey, VendorID, VendorPassword, CompanyKeyDivisor, XML})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginDownloadPropertyBlockList(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal CompanyKeyDivisor As Long, ByVal XML As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("DownloadPropertyBlockList", New Object() {PartnerKey, VendorID, VendorPassword, CompanyKeyDivisor, XML}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndDownloadPropertyBlockList(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DownloadPropertyBlockListAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal CompanyKeyDivisor As Long, ByVal XML As String)
            Me.DownloadPropertyBlockListAsync(PartnerKey, VendorID, VendorPassword, CompanyKeyDivisor, XML, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DownloadPropertyBlockListAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal CompanyKeyDivisor As Long, ByVal XML As String, ByVal userState As Object)
            If (Me.DownloadPropertyBlockListOperationCompleted Is Nothing) Then
                Me.DownloadPropertyBlockListOperationCompleted = AddressOf Me.OnDownloadPropertyBlockListOperationCompleted
            End If
            Me.InvokeAsync("DownloadPropertyBlockList", New Object() {PartnerKey, VendorID, VendorPassword, CompanyKeyDivisor, XML}, Me.DownloadPropertyBlockListOperationCompleted, userState)
        End Sub
        
        Private Sub OnDownloadPropertyBlockListOperationCompleted(ByVal arg As Object)
            If (Not (Me.DownloadPropertyBlockListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DownloadPropertyBlockListCompleted(Me, New DownloadPropertyBlockListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://VillageManagementSoftware.com/DownloadPropertyDS", RequestNamespace:="http://VillageManagementSoftware.com/", ResponseNamespace:="http://VillageManagementSoftware.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DownloadPropertyDS(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal CompanyKey As Integer, ByVal ResidentKey As Integer, ByVal ResidentContactKey As Integer, ByVal InformationBitMap As Long, ByVal PeriodDate As Date) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("DownloadPropertyDS", New Object() {PartnerKey, VendorID, VendorPassword, CompanyKey, ResidentKey, ResidentContactKey, InformationBitMap, PeriodDate})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginDownloadPropertyDS(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal CompanyKey As Integer, ByVal ResidentKey As Integer, ByVal ResidentContactKey As Integer, ByVal InformationBitMap As Long, ByVal PeriodDate As Date, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("DownloadPropertyDS", New Object() {PartnerKey, VendorID, VendorPassword, CompanyKey, ResidentKey, ResidentContactKey, InformationBitMap, PeriodDate}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndDownloadPropertyDS(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DownloadPropertyDSAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal CompanyKey As Integer, ByVal ResidentKey As Integer, ByVal ResidentContactKey As Integer, ByVal InformationBitMap As Long, ByVal PeriodDate As Date)
            Me.DownloadPropertyDSAsync(PartnerKey, VendorID, VendorPassword, CompanyKey, ResidentKey, ResidentContactKey, InformationBitMap, PeriodDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DownloadPropertyDSAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal CompanyKey As Integer, ByVal ResidentKey As Integer, ByVal ResidentContactKey As Integer, ByVal InformationBitMap As Long, ByVal PeriodDate As Date, ByVal userState As Object)
            If (Me.DownloadPropertyDSOperationCompleted Is Nothing) Then
                Me.DownloadPropertyDSOperationCompleted = AddressOf Me.OnDownloadPropertyDSOperationCompleted
            End If
            Me.InvokeAsync("DownloadPropertyDS", New Object() {PartnerKey, VendorID, VendorPassword, CompanyKey, ResidentKey, ResidentContactKey, InformationBitMap, PeriodDate}, Me.DownloadPropertyDSOperationCompleted, userState)
        End Sub
        
        Private Sub OnDownloadPropertyDSOperationCompleted(ByVal arg As Object)
            If (Not (Me.DownloadPropertyDSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DownloadPropertyDSCompleted(Me, New DownloadPropertyDSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://VillageManagementSoftware.com/UpdateeDistributionNote", RequestNamespace:="http://VillageManagementSoftware.com/", ResponseNamespace:="http://VillageManagementSoftware.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateeDistributionNote(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal NoteRecordXML As String) As String
            Dim results() As Object = Me.Invoke("UpdateeDistributionNote", New Object() {PartnerKey, VendorID, VendorPassword, NoteRecordXML})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateeDistributionNote(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal NoteRecordXML As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateeDistributionNote", New Object() {PartnerKey, VendorID, VendorPassword, NoteRecordXML}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateeDistributionNote(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateeDistributionNoteAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal NoteRecordXML As String)
            Me.UpdateeDistributionNoteAsync(PartnerKey, VendorID, VendorPassword, NoteRecordXML, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateeDistributionNoteAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal NoteRecordXML As String, ByVal userState As Object)
            If (Me.UpdateeDistributionNoteOperationCompleted Is Nothing) Then
                Me.UpdateeDistributionNoteOperationCompleted = AddressOf Me.OnUpdateeDistributionNoteOperationCompleted
            End If
            Me.InvokeAsync("UpdateeDistributionNote", New Object() {PartnerKey, VendorID, VendorPassword, NoteRecordXML}, Me.UpdateeDistributionNoteOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateeDistributionNoteOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateeDistributionNoteCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateeDistributionNoteCompleted(Me, New UpdateeDistributionNoteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://VillageManagementSoftware.com/DownloadResidentNote", RequestNamespace:="http://VillageManagementSoftware.com/", ResponseNamespace:="http://VillageManagementSoftware.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DownloadResidentNote(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal ResidentKey As Long, ByVal ResidentNoteKey As Long, ByVal IncludeClosed As Boolean) As String
            Dim results() As Object = Me.Invoke("DownloadResidentNote", New Object() {PartnerKey, VendorID, VendorPassword, ResidentKey, ResidentNoteKey, IncludeClosed})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginDownloadResidentNote(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal ResidentKey As Long, ByVal ResidentNoteKey As Long, ByVal IncludeClosed As Boolean, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("DownloadResidentNote", New Object() {PartnerKey, VendorID, VendorPassword, ResidentKey, ResidentNoteKey, IncludeClosed}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndDownloadResidentNote(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DownloadResidentNoteAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal ResidentKey As Long, ByVal ResidentNoteKey As Long, ByVal IncludeClosed As Boolean)
            Me.DownloadResidentNoteAsync(PartnerKey, VendorID, VendorPassword, ResidentKey, ResidentNoteKey, IncludeClosed, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DownloadResidentNoteAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal ResidentKey As Long, ByVal ResidentNoteKey As Long, ByVal IncludeClosed As Boolean, ByVal userState As Object)
            If (Me.DownloadResidentNoteOperationCompleted Is Nothing) Then
                Me.DownloadResidentNoteOperationCompleted = AddressOf Me.OnDownloadResidentNoteOperationCompleted
            End If
            Me.InvokeAsync("DownloadResidentNote", New Object() {PartnerKey, VendorID, VendorPassword, ResidentKey, ResidentNoteKey, IncludeClosed}, Me.DownloadResidentNoteOperationCompleted, userState)
        End Sub
        
        Private Sub OnDownloadResidentNoteOperationCompleted(ByVal arg As Object)
            If (Not (Me.DownloadResidentNoteCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DownloadResidentNoteCompleted(Me, New DownloadResidentNoteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://VillageManagementSoftware.com/DownloadResidentNoteDS", RequestNamespace:="http://VillageManagementSoftware.com/", ResponseNamespace:="http://VillageManagementSoftware.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DownloadResidentNoteDS(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal ResidentKey As Long, ByVal ResidentNoteKey As Long, ByVal IncludeClosed As Boolean) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("DownloadResidentNoteDS", New Object() {PartnerKey, VendorID, VendorPassword, ResidentKey, ResidentNoteKey, IncludeClosed})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginDownloadResidentNoteDS(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal ResidentKey As Long, ByVal ResidentNoteKey As Long, ByVal IncludeClosed As Boolean, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("DownloadResidentNoteDS", New Object() {PartnerKey, VendorID, VendorPassword, ResidentKey, ResidentNoteKey, IncludeClosed}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndDownloadResidentNoteDS(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DownloadResidentNoteDSAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal ResidentKey As Long, ByVal ResidentNoteKey As Long, ByVal IncludeClosed As Boolean)
            Me.DownloadResidentNoteDSAsync(PartnerKey, VendorID, VendorPassword, ResidentKey, ResidentNoteKey, IncludeClosed, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DownloadResidentNoteDSAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal ResidentKey As Long, ByVal ResidentNoteKey As Long, ByVal IncludeClosed As Boolean, ByVal userState As Object)
            If (Me.DownloadResidentNoteDSOperationCompleted Is Nothing) Then
                Me.DownloadResidentNoteDSOperationCompleted = AddressOf Me.OnDownloadResidentNoteDSOperationCompleted
            End If
            Me.InvokeAsync("DownloadResidentNoteDS", New Object() {PartnerKey, VendorID, VendorPassword, ResidentKey, ResidentNoteKey, IncludeClosed}, Me.DownloadResidentNoteDSOperationCompleted, userState)
        End Sub
        
        Private Sub OnDownloadResidentNoteDSOperationCompleted(ByVal arg As Object)
            If (Not (Me.DownloadResidentNoteDSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DownloadResidentNoteDSCompleted(Me, New DownloadResidentNoteDSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://VillageManagementSoftware.com/UpdateResidentNote", RequestNamespace:="http://VillageManagementSoftware.com/", ResponseNamespace:="http://VillageManagementSoftware.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateResidentNote(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal ResidentNoteRecordXML As String) As String
            Dim results() As Object = Me.Invoke("UpdateResidentNote", New Object() {PartnerKey, VendorID, VendorPassword, ResidentNoteRecordXML})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateResidentNote(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal ResidentNoteRecordXML As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateResidentNote", New Object() {PartnerKey, VendorID, VendorPassword, ResidentNoteRecordXML}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateResidentNote(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateResidentNoteAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal ResidentNoteRecordXML As String)
            Me.UpdateResidentNoteAsync(PartnerKey, VendorID, VendorPassword, ResidentNoteRecordXML, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateResidentNoteAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal ResidentNoteRecordXML As String, ByVal userState As Object)
            If (Me.UpdateResidentNoteOperationCompleted Is Nothing) Then
                Me.UpdateResidentNoteOperationCompleted = AddressOf Me.OnUpdateResidentNoteOperationCompleted
            End If
            Me.InvokeAsync("UpdateResidentNote", New Object() {PartnerKey, VendorID, VendorPassword, ResidentNoteRecordXML}, Me.UpdateResidentNoteOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateResidentNoteOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateResidentNoteCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateResidentNoteCompleted(Me, New UpdateResidentNoteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://VillageManagementSoftware.com/DeleteResidentNote", RequestNamespace:="http://VillageManagementSoftware.com/", ResponseNamespace:="http://VillageManagementSoftware.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteResidentNote(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal ResidentNoteKey As Integer) As String
            Dim results() As Object = Me.Invoke("DeleteResidentNote", New Object() {PartnerKey, VendorID, VendorPassword, ResidentNoteKey})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginDeleteResidentNote(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal ResidentNoteKey As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("DeleteResidentNote", New Object() {PartnerKey, VendorID, VendorPassword, ResidentNoteKey}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndDeleteResidentNote(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteResidentNoteAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal ResidentNoteKey As Integer)
            Me.DeleteResidentNoteAsync(PartnerKey, VendorID, VendorPassword, ResidentNoteKey, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteResidentNoteAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal ResidentNoteKey As Integer, ByVal userState As Object)
            If (Me.DeleteResidentNoteOperationCompleted Is Nothing) Then
                Me.DeleteResidentNoteOperationCompleted = AddressOf Me.OnDeleteResidentNoteOperationCompleted
            End If
            Me.InvokeAsync("DeleteResidentNote", New Object() {PartnerKey, VendorID, VendorPassword, ResidentNoteKey}, Me.DeleteResidentNoteOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteResidentNoteOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteResidentNoteCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteResidentNoteCompleted(Me, New DeleteResidentNoteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://VillageManagementSoftware.com/DownloadResidentContact", RequestNamespace:="http://VillageManagementSoftware.com/", ResponseNamespace:="http://VillageManagementSoftware.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DownloadResidentContact(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal ResidentKey As Long, ByVal ResidentContactKey As Long) As String
            Dim results() As Object = Me.Invoke("DownloadResidentContact", New Object() {PartnerKey, VendorID, VendorPassword, ResidentKey, ResidentContactKey})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginDownloadResidentContact(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal ResidentKey As Long, ByVal ResidentContactKey As Long, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("DownloadResidentContact", New Object() {PartnerKey, VendorID, VendorPassword, ResidentKey, ResidentContactKey}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndDownloadResidentContact(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DownloadResidentContactAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal ResidentKey As Long, ByVal ResidentContactKey As Long)
            Me.DownloadResidentContactAsync(PartnerKey, VendorID, VendorPassword, ResidentKey, ResidentContactKey, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DownloadResidentContactAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal ResidentKey As Long, ByVal ResidentContactKey As Long, ByVal userState As Object)
            If (Me.DownloadResidentContactOperationCompleted Is Nothing) Then
                Me.DownloadResidentContactOperationCompleted = AddressOf Me.OnDownloadResidentContactOperationCompleted
            End If
            Me.InvokeAsync("DownloadResidentContact", New Object() {PartnerKey, VendorID, VendorPassword, ResidentKey, ResidentContactKey}, Me.DownloadResidentContactOperationCompleted, userState)
        End Sub
        
        Private Sub OnDownloadResidentContactOperationCompleted(ByVal arg As Object)
            If (Not (Me.DownloadResidentContactCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DownloadResidentContactCompleted(Me, New DownloadResidentContactCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://VillageManagementSoftware.com/DownloadResidentContactDS", RequestNamespace:="http://VillageManagementSoftware.com/", ResponseNamespace:="http://VillageManagementSoftware.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DownloadResidentContactDS(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal ResidentKey As Long, ByVal ResidentContactKey As Long) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("DownloadResidentContactDS", New Object() {PartnerKey, VendorID, VendorPassword, ResidentKey, ResidentContactKey})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginDownloadResidentContactDS(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal ResidentKey As Long, ByVal ResidentContactKey As Long, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("DownloadResidentContactDS", New Object() {PartnerKey, VendorID, VendorPassword, ResidentKey, ResidentContactKey}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndDownloadResidentContactDS(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DownloadResidentContactDSAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal ResidentKey As Long, ByVal ResidentContactKey As Long)
            Me.DownloadResidentContactDSAsync(PartnerKey, VendorID, VendorPassword, ResidentKey, ResidentContactKey, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DownloadResidentContactDSAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal ResidentKey As Long, ByVal ResidentContactKey As Long, ByVal userState As Object)
            If (Me.DownloadResidentContactDSOperationCompleted Is Nothing) Then
                Me.DownloadResidentContactDSOperationCompleted = AddressOf Me.OnDownloadResidentContactDSOperationCompleted
            End If
            Me.InvokeAsync("DownloadResidentContactDS", New Object() {PartnerKey, VendorID, VendorPassword, ResidentKey, ResidentContactKey}, Me.DownloadResidentContactDSOperationCompleted, userState)
        End Sub
        
        Private Sub OnDownloadResidentContactDSOperationCompleted(ByVal arg As Object)
            If (Not (Me.DownloadResidentContactDSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DownloadResidentContactDSCompleted(Me, New DownloadResidentContactDSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://VillageManagementSoftware.com/UpdateResidentContact", RequestNamespace:="http://VillageManagementSoftware.com/", ResponseNamespace:="http://VillageManagementSoftware.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateResidentContact(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal ResidentContactRecordXML As String) As String
            Dim results() As Object = Me.Invoke("UpdateResidentContact", New Object() {PartnerKey, VendorID, VendorPassword, ResidentContactRecordXML})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateResidentContact(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal ResidentContactRecordXML As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateResidentContact", New Object() {PartnerKey, VendorID, VendorPassword, ResidentContactRecordXML}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateResidentContact(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateResidentContactAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal ResidentContactRecordXML As String)
            Me.UpdateResidentContactAsync(PartnerKey, VendorID, VendorPassword, ResidentContactRecordXML, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateResidentContactAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal ResidentContactRecordXML As String, ByVal userState As Object)
            If (Me.UpdateResidentContactOperationCompleted Is Nothing) Then
                Me.UpdateResidentContactOperationCompleted = AddressOf Me.OnUpdateResidentContactOperationCompleted
            End If
            Me.InvokeAsync("UpdateResidentContact", New Object() {PartnerKey, VendorID, VendorPassword, ResidentContactRecordXML}, Me.UpdateResidentContactOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateResidentContactOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateResidentContactCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateResidentContactCompleted(Me, New UpdateResidentContactCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://VillageManagementSoftware.com/DeleteResidentContact", RequestNamespace:="http://VillageManagementSoftware.com/", ResponseNamespace:="http://VillageManagementSoftware.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteResidentContact(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal ResidentContactKey As Integer) As String
            Dim results() As Object = Me.Invoke("DeleteResidentContact", New Object() {PartnerKey, VendorID, VendorPassword, ResidentContactKey})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginDeleteResidentContact(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal ResidentContactKey As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("DeleteResidentContact", New Object() {PartnerKey, VendorID, VendorPassword, ResidentContactKey}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndDeleteResidentContact(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteResidentContactAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal ResidentContactKey As Integer)
            Me.DeleteResidentContactAsync(PartnerKey, VendorID, VendorPassword, ResidentContactKey, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteResidentContactAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal ResidentContactKey As Integer, ByVal userState As Object)
            If (Me.DeleteResidentContactOperationCompleted Is Nothing) Then
                Me.DeleteResidentContactOperationCompleted = AddressOf Me.OnDeleteResidentContactOperationCompleted
            End If
            Me.InvokeAsync("DeleteResidentContact", New Object() {PartnerKey, VendorID, VendorPassword, ResidentContactKey}, Me.DeleteResidentContactOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteResidentContactOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteResidentContactCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteResidentContactCompleted(Me, New DeleteResidentContactCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://VillageManagementSoftware.com/DeleteResidentContactMethod", RequestNamespace:="http://VillageManagementSoftware.com/", ResponseNamespace:="http://VillageManagementSoftware.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteResidentContactMethod(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal ResidentContactMethodKey As Integer) As String
            Dim results() As Object = Me.Invoke("DeleteResidentContactMethod", New Object() {PartnerKey, VendorID, VendorPassword, ResidentContactMethodKey})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginDeleteResidentContactMethod(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal ResidentContactMethodKey As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("DeleteResidentContactMethod", New Object() {PartnerKey, VendorID, VendorPassword, ResidentContactMethodKey}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndDeleteResidentContactMethod(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteResidentContactMethodAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal ResidentContactMethodKey As Integer)
            Me.DeleteResidentContactMethodAsync(PartnerKey, VendorID, VendorPassword, ResidentContactMethodKey, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteResidentContactMethodAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal ResidentContactMethodKey As Integer, ByVal userState As Object)
            If (Me.DeleteResidentContactMethodOperationCompleted Is Nothing) Then
                Me.DeleteResidentContactMethodOperationCompleted = AddressOf Me.OnDeleteResidentContactMethodOperationCompleted
            End If
            Me.InvokeAsync("DeleteResidentContactMethod", New Object() {PartnerKey, VendorID, VendorPassword, ResidentContactMethodKey}, Me.DeleteResidentContactMethodOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteResidentContactMethodOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteResidentContactMethodCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteResidentContactMethodCompleted(Me, New DeleteResidentContactMethodCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://VillageManagementSoftware.com/DeleteVendorInsurancePolicy", RequestNamespace:="http://VillageManagementSoftware.com/", ResponseNamespace:="http://VillageManagementSoftware.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteVendorInsurancePolicy(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal VendorInsuranceKey As Integer) As String
            Dim results() As Object = Me.Invoke("DeleteVendorInsurancePolicy", New Object() {PartnerKey, VendorID, VendorPassword, VendorInsuranceKey})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginDeleteVendorInsurancePolicy(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal VendorInsuranceKey As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("DeleteVendorInsurancePolicy", New Object() {PartnerKey, VendorID, VendorPassword, VendorInsuranceKey}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndDeleteVendorInsurancePolicy(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteVendorInsurancePolicyAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal VendorInsuranceKey As Integer)
            Me.DeleteVendorInsurancePolicyAsync(PartnerKey, VendorID, VendorPassword, VendorInsuranceKey, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteVendorInsurancePolicyAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal VendorInsuranceKey As Integer, ByVal userState As Object)
            If (Me.DeleteVendorInsurancePolicyOperationCompleted Is Nothing) Then
                Me.DeleteVendorInsurancePolicyOperationCompleted = AddressOf Me.OnDeleteVendorInsurancePolicyOperationCompleted
            End If
            Me.InvokeAsync("DeleteVendorInsurancePolicy", New Object() {PartnerKey, VendorID, VendorPassword, VendorInsuranceKey}, Me.DeleteVendorInsurancePolicyOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteVendorInsurancePolicyOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteVendorInsurancePolicyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteVendorInsurancePolicyCompleted(Me, New DeleteVendorInsurancePolicyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://VillageManagementSoftware.com/DeleteVendorInsurancePolicyDetail", RequestNamespace:="http://VillageManagementSoftware.com/", ResponseNamespace:="http://VillageManagementSoftware.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteVendorInsurancePolicyDetail(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal VendorInsurancePolicyKey As Integer) As String
            Dim results() As Object = Me.Invoke("DeleteVendorInsurancePolicyDetail", New Object() {PartnerKey, VendorID, VendorPassword, VendorInsurancePolicyKey})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginDeleteVendorInsurancePolicyDetail(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal VendorInsurancePolicyKey As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("DeleteVendorInsurancePolicyDetail", New Object() {PartnerKey, VendorID, VendorPassword, VendorInsurancePolicyKey}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndDeleteVendorInsurancePolicyDetail(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteVendorInsurancePolicyDetailAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal VendorInsurancePolicyKey As Integer)
            Me.DeleteVendorInsurancePolicyDetailAsync(PartnerKey, VendorID, VendorPassword, VendorInsurancePolicyKey, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteVendorInsurancePolicyDetailAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal VendorInsurancePolicyKey As Integer, ByVal userState As Object)
            If (Me.DeleteVendorInsurancePolicyDetailOperationCompleted Is Nothing) Then
                Me.DeleteVendorInsurancePolicyDetailOperationCompleted = AddressOf Me.OnDeleteVendorInsurancePolicyDetailOperationCompleted
            End If
            Me.InvokeAsync("DeleteVendorInsurancePolicyDetail", New Object() {PartnerKey, VendorID, VendorPassword, VendorInsurancePolicyKey}, Me.DeleteVendorInsurancePolicyDetailOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteVendorInsurancePolicyDetailOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteVendorInsurancePolicyDetailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteVendorInsurancePolicyDetailCompleted(Me, New DeleteVendorInsurancePolicyDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://VillageManagementSoftware.com/DownloadVendor", RequestNamespace:="http://VillageManagementSoftware.com/", ResponseNamespace:="http://VillageManagementSoftware.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DownloadVendor(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal InformationBitMap As Long, ByVal PeriodDate As Date) As String
            Dim results() As Object = Me.Invoke("DownloadVendor", New Object() {PartnerKey, VendorID, VendorPassword, InformationBitMap, PeriodDate})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginDownloadVendor(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal InformationBitMap As Long, ByVal PeriodDate As Date, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("DownloadVendor", New Object() {PartnerKey, VendorID, VendorPassword, InformationBitMap, PeriodDate}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndDownloadVendor(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DownloadVendorAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal InformationBitMap As Long, ByVal PeriodDate As Date)
            Me.DownloadVendorAsync(PartnerKey, VendorID, VendorPassword, InformationBitMap, PeriodDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DownloadVendorAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal InformationBitMap As Long, ByVal PeriodDate As Date, ByVal userState As Object)
            If (Me.DownloadVendorOperationCompleted Is Nothing) Then
                Me.DownloadVendorOperationCompleted = AddressOf Me.OnDownloadVendorOperationCompleted
            End If
            Me.InvokeAsync("DownloadVendor", New Object() {PartnerKey, VendorID, VendorPassword, InformationBitMap, PeriodDate}, Me.DownloadVendorOperationCompleted, userState)
        End Sub
        
        Private Sub OnDownloadVendorOperationCompleted(ByVal arg As Object)
            If (Not (Me.DownloadVendorCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DownloadVendorCompleted(Me, New DownloadVendorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://VillageManagementSoftware.com/DownloadVendorDS", RequestNamespace:="http://VillageManagementSoftware.com/", ResponseNamespace:="http://VillageManagementSoftware.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DownloadVendorDS(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal InformationBitMap As Long, ByVal PeriodDate As Date) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("DownloadVendorDS", New Object() {PartnerKey, VendorID, VendorPassword, InformationBitMap, PeriodDate})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginDownloadVendorDS(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal InformationBitMap As Long, ByVal PeriodDate As Date, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("DownloadVendorDS", New Object() {PartnerKey, VendorID, VendorPassword, InformationBitMap, PeriodDate}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndDownloadVendorDS(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DownloadVendorDSAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal InformationBitMap As Long, ByVal PeriodDate As Date)
            Me.DownloadVendorDSAsync(PartnerKey, VendorID, VendorPassword, InformationBitMap, PeriodDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DownloadVendorDSAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal InformationBitMap As Long, ByVal PeriodDate As Date, ByVal userState As Object)
            If (Me.DownloadVendorDSOperationCompleted Is Nothing) Then
                Me.DownloadVendorDSOperationCompleted = AddressOf Me.OnDownloadVendorDSOperationCompleted
            End If
            Me.InvokeAsync("DownloadVendorDS", New Object() {PartnerKey, VendorID, VendorPassword, InformationBitMap, PeriodDate}, Me.DownloadVendorDSOperationCompleted, userState)
        End Sub
        
        Private Sub OnDownloadVendorDSOperationCompleted(ByVal arg As Object)
            If (Not (Me.DownloadVendorDSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DownloadVendorDSCompleted(Me, New DownloadVendorDSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://VillageManagementSoftware.com/DownloadVendorByTaxIdentification", RequestNamespace:="http://VillageManagementSoftware.com/", ResponseNamespace:="http://VillageManagementSoftware.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DownloadVendorByTaxIdentification(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal InformationBitMap As Long, ByVal TaxIdentification As String) As String
            Dim results() As Object = Me.Invoke("DownloadVendorByTaxIdentification", New Object() {PartnerKey, VendorID, VendorPassword, InformationBitMap, TaxIdentification})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginDownloadVendorByTaxIdentification(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal InformationBitMap As Long, ByVal TaxIdentification As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("DownloadVendorByTaxIdentification", New Object() {PartnerKey, VendorID, VendorPassword, InformationBitMap, TaxIdentification}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndDownloadVendorByTaxIdentification(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DownloadVendorByTaxIdentificationAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal InformationBitMap As Long, ByVal TaxIdentification As String)
            Me.DownloadVendorByTaxIdentificationAsync(PartnerKey, VendorID, VendorPassword, InformationBitMap, TaxIdentification, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DownloadVendorByTaxIdentificationAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal InformationBitMap As Long, ByVal TaxIdentification As String, ByVal userState As Object)
            If (Me.DownloadVendorByTaxIdentificationOperationCompleted Is Nothing) Then
                Me.DownloadVendorByTaxIdentificationOperationCompleted = AddressOf Me.OnDownloadVendorByTaxIdentificationOperationCompleted
            End If
            Me.InvokeAsync("DownloadVendorByTaxIdentification", New Object() {PartnerKey, VendorID, VendorPassword, InformationBitMap, TaxIdentification}, Me.DownloadVendorByTaxIdentificationOperationCompleted, userState)
        End Sub
        
        Private Sub OnDownloadVendorByTaxIdentificationOperationCompleted(ByVal arg As Object)
            If (Not (Me.DownloadVendorByTaxIdentificationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DownloadVendorByTaxIdentificationCompleted(Me, New DownloadVendorByTaxIdentificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://VillageManagementSoftware.com/UpdateVendor", RequestNamespace:="http://VillageManagementSoftware.com/", ResponseNamespace:="http://VillageManagementSoftware.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateVendor(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal VendorRecordXML As String) As String
            Dim results() As Object = Me.Invoke("UpdateVendor", New Object() {PartnerKey, VendorID, VendorPassword, VendorRecordXML})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateVendor(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal VendorRecordXML As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateVendor", New Object() {PartnerKey, VendorID, VendorPassword, VendorRecordXML}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateVendor(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateVendorAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal VendorRecordXML As String)
            Me.UpdateVendorAsync(PartnerKey, VendorID, VendorPassword, VendorRecordXML, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateVendorAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal VendorRecordXML As String, ByVal userState As Object)
            If (Me.UpdateVendorOperationCompleted Is Nothing) Then
                Me.UpdateVendorOperationCompleted = AddressOf Me.OnUpdateVendorOperationCompleted
            End If
            Me.InvokeAsync("UpdateVendor", New Object() {PartnerKey, VendorID, VendorPassword, VendorRecordXML}, Me.UpdateVendorOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateVendorOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateVendorCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateVendorCompleted(Me, New UpdateVendorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://VillageManagementSoftware.com/UpdateVendorContact", RequestNamespace:="http://VillageManagementSoftware.com/", ResponseNamespace:="http://VillageManagementSoftware.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateVendorContact(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal VendorContactRecordXML As String) As String
            Dim results() As Object = Me.Invoke("UpdateVendorContact", New Object() {PartnerKey, VendorID, VendorPassword, VendorContactRecordXML})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateVendorContact(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal VendorContactRecordXML As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateVendorContact", New Object() {PartnerKey, VendorID, VendorPassword, VendorContactRecordXML}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateVendorContact(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateVendorContactAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal VendorContactRecordXML As String)
            Me.UpdateVendorContactAsync(PartnerKey, VendorID, VendorPassword, VendorContactRecordXML, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateVendorContactAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal VendorContactRecordXML As String, ByVal userState As Object)
            If (Me.UpdateVendorContactOperationCompleted Is Nothing) Then
                Me.UpdateVendorContactOperationCompleted = AddressOf Me.OnUpdateVendorContactOperationCompleted
            End If
            Me.InvokeAsync("UpdateVendorContact", New Object() {PartnerKey, VendorID, VendorPassword, VendorContactRecordXML}, Me.UpdateVendorContactOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateVendorContactOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateVendorContactCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateVendorContactCompleted(Me, New UpdateVendorContactCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://VillageManagementSoftware.com/UpdateVendorInsurance", RequestNamespace:="http://VillageManagementSoftware.com/", ResponseNamespace:="http://VillageManagementSoftware.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateVendorInsurance(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal VendorInsuranceRecordXML As String) As String
            Dim results() As Object = Me.Invoke("UpdateVendorInsurance", New Object() {PartnerKey, VendorID, VendorPassword, VendorInsuranceRecordXML})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateVendorInsurance(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal VendorInsuranceRecordXML As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateVendorInsurance", New Object() {PartnerKey, VendorID, VendorPassword, VendorInsuranceRecordXML}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateVendorInsurance(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateVendorInsuranceAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal VendorInsuranceRecordXML As String)
            Me.UpdateVendorInsuranceAsync(PartnerKey, VendorID, VendorPassword, VendorInsuranceRecordXML, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateVendorInsuranceAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal VendorInsuranceRecordXML As String, ByVal userState As Object)
            If (Me.UpdateVendorInsuranceOperationCompleted Is Nothing) Then
                Me.UpdateVendorInsuranceOperationCompleted = AddressOf Me.OnUpdateVendorInsuranceOperationCompleted
            End If
            Me.InvokeAsync("UpdateVendorInsurance", New Object() {PartnerKey, VendorID, VendorPassword, VendorInsuranceRecordXML}, Me.UpdateVendorInsuranceOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateVendorInsuranceOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateVendorInsuranceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateVendorInsuranceCompleted(Me, New UpdateVendorInsuranceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://VillageManagementSoftware.com/UpdateVendorLocation", RequestNamespace:="http://VillageManagementSoftware.com/", ResponseNamespace:="http://VillageManagementSoftware.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateVendorLocation(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal VendorLocationRecordXML As String) As String
            Dim results() As Object = Me.Invoke("UpdateVendorLocation", New Object() {PartnerKey, VendorID, VendorPassword, VendorLocationRecordXML})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateVendorLocation(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal VendorLocationRecordXML As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateVendorLocation", New Object() {PartnerKey, VendorID, VendorPassword, VendorLocationRecordXML}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateVendorLocation(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateVendorLocationAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal VendorLocationRecordXML As String)
            Me.UpdateVendorLocationAsync(PartnerKey, VendorID, VendorPassword, VendorLocationRecordXML, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateVendorLocationAsync(ByVal PartnerKey As String, ByVal VendorID As String, ByVal VendorPassword As String, ByVal VendorLocationRecordXML As String, ByVal userState As Object)
            If (Me.UpdateVendorLocationOperationCompleted Is Nothing) Then
                Me.UpdateVendorLocationOperationCompleted = AddressOf Me.OnUpdateVendorLocationOperationCompleted
            End If
            Me.InvokeAsync("UpdateVendorLocation", New Object() {PartnerKey, VendorID, VendorPassword, VendorLocationRecordXML}, Me.UpdateVendorLocationOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateVendorLocationOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateVendorLocationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateVendorLocationCompleted(Me, New UpdateVendorLocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub RequestServerUTCCompletedEventHandler(ByVal sender As Object, ByVal e As RequestServerUTCCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RequestServerUTCCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub RequestServiceVersionCompletedEventHandler(ByVal sender As Object, ByVal e As RequestServiceVersionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RequestServiceVersionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub ARPostTransactionCompletedEventHandler(ByVal sender As Object, ByVal e As ARPostTransactionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ARPostTransactionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub APAddVoucherUsingXMLCompletedEventHandler(ByVal sender As Object, ByVal e As APAddVoucherUsingXMLCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class APAddVoucherUsingXMLCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub APAddVoucherFileCompletedEventHandler(ByVal sender As Object, ByVal e As APAddVoucherFileCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class APAddVoucherFileCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub APApproveVoucherCompletedEventHandler(ByVal sender As Object, ByVal e As APApproveVoucherCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class APApproveVoucherCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub APGetVouchersCompletedEventHandler(ByVal sender As Object, ByVal e As APGetVouchersCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class APGetVouchersCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub APMergeVouchersCompletedEventHandler(ByVal sender As Object, ByVal e As APMergeVouchersCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class APMergeVouchersCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub APPostPaymentCompletedEventHandler(ByVal sender As Object, ByVal e As APPostPaymentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class APPostPaymentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub APProcessVoucherCompletedEventHandler(ByVal sender As Object, ByVal e As APProcessVoucherCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class APProcessVoucherCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub APUnProcessVoucherCompletedEventHandler(ByVal sender As Object, ByVal e As APUnProcessVoucherCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class APUnProcessVoucherCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub APVoidPaymentCompletedEventHandler(ByVal sender As Object, ByVal e As APVoidPaymentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class APVoidPaymentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub CommerceOrderCompletedEventHandler(ByVal sender As Object, ByVal e As CommerceOrderCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CommerceOrderCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub DownloadComplianceCompletedEventHandler(ByVal sender As Object, ByVal e As DownloadComplianceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DownloadComplianceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub DownloadComplianceDSCompletedEventHandler(ByVal sender As Object, ByVal e As DownloadComplianceDSCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DownloadComplianceDSCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub PostComplianceFineCompletedEventHandler(ByVal sender As Object, ByVal e As PostComplianceFineCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PostComplianceFineCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub UpdateComplianceCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateComplianceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateComplianceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub UpdateComplianceSequenceCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateComplianceSequenceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateComplianceSequenceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub DeleteInsurerContactCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteInsurerContactCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteInsurerContactCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub DownloadInsurerCompletedEventHandler(ByVal sender As Object, ByVal e As DownloadInsurerCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DownloadInsurerCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub DownloadInsurerDSCompletedEventHandler(ByVal sender As Object, ByVal e As DownloadInsurerDSCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DownloadInsurerDSCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub UpdateInsurerCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateInsurerCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateInsurerCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub UpdateInsurerContactCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateInsurerContactCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateInsurerContactCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub GetBankAccountBalanceCompletedEventHandler(ByVal sender As Object, ByVal e As GetBankAccountBalanceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetBankAccountBalanceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub GetPropertyDocumentURLCompletedEventHandler(ByVal sender As Object, ByVal e As GetPropertyDocumentURLCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPropertyDocumentURLCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub DocumentDownloadCompletedEventHandler(ByVal sender As Object, ByVal e As DocumentDownloadCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DocumentDownloadCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub DocumentsDownloadCompletedEventHandler(ByVal sender As Object, ByVal e As DocumentsDownloadCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DocumentsDownloadCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub DownloadPropertyDocumentsCompletedEventHandler(ByVal sender As Object, ByVal e As DownloadPropertyDocumentsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DownloadPropertyDocumentsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub DownloadPropertyCompletedEventHandler(ByVal sender As Object, ByVal e As DownloadPropertyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DownloadPropertyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub DownloadPropertiesCompletedEventHandler(ByVal sender As Object, ByVal e As DownloadPropertiesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DownloadPropertiesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub DownloadPropertyBlockListCompletedEventHandler(ByVal sender As Object, ByVal e As DownloadPropertyBlockListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DownloadPropertyBlockListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub DownloadPropertyDSCompletedEventHandler(ByVal sender As Object, ByVal e As DownloadPropertyDSCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DownloadPropertyDSCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub UpdateeDistributionNoteCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateeDistributionNoteCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateeDistributionNoteCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub DownloadResidentNoteCompletedEventHandler(ByVal sender As Object, ByVal e As DownloadResidentNoteCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DownloadResidentNoteCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub DownloadResidentNoteDSCompletedEventHandler(ByVal sender As Object, ByVal e As DownloadResidentNoteDSCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DownloadResidentNoteDSCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub UpdateResidentNoteCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateResidentNoteCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateResidentNoteCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub DeleteResidentNoteCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteResidentNoteCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteResidentNoteCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub DownloadResidentContactCompletedEventHandler(ByVal sender As Object, ByVal e As DownloadResidentContactCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DownloadResidentContactCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub DownloadResidentContactDSCompletedEventHandler(ByVal sender As Object, ByVal e As DownloadResidentContactDSCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DownloadResidentContactDSCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub UpdateResidentContactCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateResidentContactCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateResidentContactCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub DeleteResidentContactCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteResidentContactCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteResidentContactCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub DeleteResidentContactMethodCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteResidentContactMethodCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteResidentContactMethodCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub DeleteVendorInsurancePolicyCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteVendorInsurancePolicyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteVendorInsurancePolicyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub DeleteVendorInsurancePolicyDetailCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteVendorInsurancePolicyDetailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteVendorInsurancePolicyDetailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub DownloadVendorCompletedEventHandler(ByVal sender As Object, ByVal e As DownloadVendorCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DownloadVendorCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub DownloadVendorDSCompletedEventHandler(ByVal sender As Object, ByVal e As DownloadVendorDSCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DownloadVendorDSCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub DownloadVendorByTaxIdentificationCompletedEventHandler(ByVal sender As Object, ByVal e As DownloadVendorByTaxIdentificationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DownloadVendorByTaxIdentificationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub UpdateVendorCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateVendorCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateVendorCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub UpdateVendorContactCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateVendorContactCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateVendorContactCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub UpdateVendorInsuranceCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateVendorInsuranceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateVendorInsuranceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub UpdateVendorLocationCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateVendorLocationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateVendorLocationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
End Namespace
